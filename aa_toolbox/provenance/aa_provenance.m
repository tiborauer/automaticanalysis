% This function is automagically generated by aa_build_standalone_1_pragmas
% Based on Guillaume Flandin's spm_provenance.m and spm_results_nidm.m

classdef aa_provenance < handle
    properties
        version = '0.0.1'
        pp
        p
		isvalid = false
    end
    
    properties (Hidden, SetAccess = private)
        provlib
        aap
        studypath
        
        relations = {}
        
        % so far only one subject and sessopn is supported
        indices = [1 1]
    end
    
    properties (SetAccess = private)
        IDs = {}
        isHumanReadable = true;
    end
    
    methods
        function obj = aa_provenance(aap)
%#function spm_provenance
            obj.aap = aap;
            obj.studypath = fullfile(obj.aap.acq_details.root,obj.aap.directory_conventions.analysisid);
            obj.provlib = which('spm_provenance'); % check availability
            if ~isempty(obj.provlib)
				obj.isvalid = true;
			
                % Initialise
                obj.pp = feval(basename(obj.provlib));
                obj.pp.add_namespace('nfo','http://www.semanticdesktop.org/ontologies/2007/03/22/nfo');
                obj.pp.add_namespace('aa','http://automaticanalysis.org/'); % TODO: place
                obj.pp.add_namespace('nidm','http://www.incf.org/ns/nidash/nidm#');
                obj.pp.add_namespace('spm','http://www.incf.org/ns/nidash/spm#');
                
                % agents
                % Parallel Computing
                obj.pp.agent('idPCP1',{...
                    'prov:type','aa:ParallelComputingProvider',...
                    'prov:label',obj.aap.options.wheretoprocess,...
                    });      
                
                % MATLAB
                obj.pp.agent('idMATLAB1',{...
                    'prov:type','prov:SoftwareAgent',...
                    'prov:label',{'MATLAB','xsd:string'},...
                    'aa:version',{version,'xsd:string'},...
                    'nfo:belongsToContainer',{matlabroot, 'nfo:Folder'},...                    
                    'aa:runs','idaa1',...
                    });
                
                % aa
                global aa
                if ~isobject(aa)
                    aa = aaClass;
                end
                aagent = aa;
                obj.pp.agent('idaa',{...
                    'prov:type','aa:PipelineProcessor',...
                    'prov:label',aagent.Name,...
                    'nfo:belongsToContainer',{aagent.Path, 'nfo:Folder'},...                    
                    'aa:version',{aagent.Version,'xsd:string'},...
                    'aa:isTrackKeeping','1',...
                    'aa:hasParallelComputing','idPCP1',...
                    'aa:runs','idSPM1',...
                    'aa:runs','idFSL1',...
                    'aa:runs','idFreeSurfer1',...
                    });
                
                % SPM
                spmdir0 = fileparts(which('spm'));
                spmdir = obj.aap.directory_conventions.spmdir;
                rmpath(spmdir0); addpath(spmdir);
                [V,R] = spm('Ver');
                rmpath(spmdir); addpath(spmdir0);
                obj.pp.agent('idSPM1',{...
                    'prov:type','nidm:SPM',...
                    'prov:type','prov:SoftwareAgent',...
                    'prov:label',{'SPM','xsd:string'},...
                    'aa:version',{V,'xsd:string'},...
                    'spm:softwareRevision',{R,'xsd:string'},...
                    'nfo:belongsToContainer',{spmdir, 'nfo:Folder'},...                    
                    });

                % FSL
                fsldir = obj.aap.directory_conventions.fsldir;
                fslversion = importdata(fullfile(fsldir,'etc','fslversion'));
                obj.pp.agent('idFSL1',{...
                    'prov:type','prov:SoftwareAgent',...
                    'prov:label',{'FSL','xsd:string'},...
                    'aa:version',{fslversion{1},'xsd:string'},...
                    'nfo:belongsToContainer',{fsldir, 'nfo:Folder'},...                    
                    });
                
                % FreeSurfer
                fsdir = obj.aap.directory_conventions.freesurferdir;
                if ~isempty(fsdir) && exist(fsdir,'dir')
                    fsversion = importdata(fullfile(fsdir,'build-stamp.txt')); fsversion = textscan(fsversion{1},'%s','delimiter','-');
                    obj.pp.agent('idFreeSurfer1',{...
                        'prov:type','prov:SoftwareAgent',...
                        'prov:label',{'FreeSurfer','xsd:string'},...
                        'aa:version',{fsversion{1}{end},'xsd:string'},...
                        'nfo:belongsToContainer',{fsdir, 'nfo:Folder'},...
                        });
                end
                
                obj.IDs{1} = struct('id','idaaWorkflow');
                idResults = obj.IDs{1}.id;
                obj.pp.entity(idResults,{...
                    'prov:type','prov:Bundle',...
                    'prov:label','aa Workflow',...
                    'aa:objectModel','aa:aaWorkflow',...
                    'aa:version',{obj.version,'xsd:string'},...
                    });
                obj.pp.wasGeneratedBy(idResults,'-',now);
                obj.pp.wasAssociatedWith(idResults,'idaa');
                                
                obj.p = feval(basename(obj.provlib));
            end
            
        end
        
        function serialise(obj,serpath)
            if obj.isvalid
                if nargin < 2, serpath = obj.studypath; end  % default
                obj.pp.bundle(obj.IDs{1}.id,obj.p);
                serialize(obj.pp,fullfile(serpath,'aa_prov_workflow.provn'));
                serialize(obj.pp,fullfile(serpath,'aa_prov_workflow.ttl'));
%                 serialize(obj.pp,fullfile(obj.studypath,'aa_prov_workflow.json'));
                if ~unix('which dot')
                    serialize(obj.pp,fullfile(serpath,'aa_prov_workflow.pdf'));
                end
            end
        end
        
        function id = addModule(obj,stageindex)
            
            % Activity
            if isstruct(stageindex) % Remote
                [tag, ind] = strtok_ptrn(stageindex.stagetag,'_0');
                name = ['Remote ' stageindex.host '_' tag];
                index = sscanf(ind,'_%d');
                loaded = load(stageindex.aapfilename); raap = loaded.aap;
                
                if raap.internal.aapversion(1) ~= '5' % older aa
                    raap = aa_convert_subjects(raap);
                end
                
                iname = cell_index({raap.tasklist.main.module.name},tag);
                iindex = cell2mat({raap.tasklist.main.module(iname).index}) == index;
                rstageindex = iname(iindex);
                
                rsubj = find(strcmp({raap.acq_details.subjects.subjname},aas_getsubjname(obj.aap,obj.indices(1))));
                curr_aap = aas_setcurrenttask(raap,rstageindex,'subject',rsubj);
                
                idname = ['idRemoteActivity_' tag];
                idattr = {...
                    'aap',curr_aap,...
                    'Location',[stageindex.host fullfile(fileparts(stageindex.aapfilename),stageindex.stagetag)],...
                    };
                
                checkinput = false; % do not check input
            else
                smod = obj.aap.tasklist.main.module(stageindex);
                name = smod.name;
                index = smod.index;
                
                idname = ['idActivity_' name];
                if ~isempty(smod.extraparameters) && isfield(smod.extraparameters.aap,'directory_conventions')
                    sfx = smod.extraparameters.aap.directory_conventions.analysisid_suffix; 
                else sfx = ''; 
                end
                
                curr_aap = aas_setcurrenttask(obj.aap,stageindex,'subject',obj.indices(1));
                
                idattr = {...
                    'aap',curr_aap,...
                    'Location',fullfile([obj.studypath sfx],sprintf('%s_%05d',name,index)),...
                    };
                
                checkinput = true;
            end
            idattr = [idattr,...
                'Stagename',name,...
                'Index',index,...
                ];
            [prid_module, id] = obj.Module(idname,idattr);
            
            % Input(s)
            if checkinput
                [inputs, inputattrs] = aas_getstreams(obj.IDs{id}.aap,'input');
                for i = 1:numel(inputs)
                    istream = inputs{i};
                    if any(istream=='.')
                        [junk, istream] = strtok(istream,'.');
                        istream = istream(2:end);
                    end
                    isOptional = numel(inputattrs)>=i && isstruct(inputattrs{i}) && isfield(inputattrs{i},'isessential') && ~inputattrs{i}.isessential;
                    
                    % find source
                    inputstreamindex = strcmp({curr_aap.internal.inputstreamsources{stageindex}.stream.name},inputs{i});
                    if any(inputstreamindex)
                        srcindex = curr_aap.internal.inputstreamsources{stageindex}.stream(inputstreamindex).sourcenumber;
                    else
                        if isOptional
                            continue;
                        else
                            aas_log(obj.aap,true,...
                                sprintf('Inputstream %s of module %s not listed in depenedency!',istream,sprintf('%s_%05d',name,index)));
                        end
                    end
                    if srcindex == -1 % remote src --> add
%                         [junk,src] = strtok(src,':'); src = src(3:end);
                        rstage = smod.remotestream(strcmp({smod.remotestream.stream},istream));
                        if isempty(rstage) % try specified steamname
                            [junk,rem] = strtok_ptrn({smod.remotestream.stream},istream);
                            rstage = smod.remotestream(strcmp(rem,istream));
                        end
                        idsrc = obj.addModule(rstage);
                    else % local --> already added
                        src = sprintf('%s_%05d',curr_aap.tasklist.main.module(srcindex).name,curr_aap.tasklist.main.module(srcindex).index);
                        [lname, ind] = strtok_ptrn(src,'_0');
                        lindex = sscanf(ind,'_%d');
                        idattr = {...
                            'Stagename',lname,...
                            'Index',lindex,...
                            };
                        [junk, junk, idsrc] = obj.idExist(idattr);
                    end
                    
                    prid_inputstream = obj.addStream(idsrc,istream);
                    if isempty(prid_inputstream)
                        if isOptional, continue; 
                        else
                            aas_log(obj.aap,true,...
                                sprintf('Inputstream %s of module %s generated by %s not found!',istream,...
                                sprintf('%s_%05d',name,index),...
                                obj.IDs{idsrc}.aap.tasklist.currenttask.name));                            
                        end
                    end
                    if ~any(strcmp(obj.relations,[prid_inputstream,prid_module]))
                        obj.p.used(prid_module,prid_inputstream);
                        obj.relations{end+1} = [prid_inputstream,prid_module];
                    end
                end
            end
            
            % Output
            for o = aas_getstreams(obj.IDs{id}.aap,'output')
                ostream = o{1};
                
                prid_outputstream = obj.addStream(id,ostream);
                
                if ~isempty(prid_outputstream) &&... % optional outputs
                        ~any(strcmp(obj.relations,[prid_module,prid_outputstream]))
                    obj.p.wasGeneratedBy(prid_outputstream,prid_module)
                    obj.relations{end+1} = [prid_module,prid_outputstream];
                end
            end
            
        end
        
        function [prid, id] = addStream(obj,idsrc,stream)
            obj.IDs{idsrc}.aap.options.maximumretry = 1;
            obj.IDs{idsrc}.aap.options.verbose = -1;
            if ~isempty(obj.IDs{idsrc}.aap.acq_details.selected_sessions)
                sess = obj.IDs{idsrc}.aap.acq_details.selected_sessions(obj.indices(2));
            else
                sess = obj.indices(2);
            end
            
            [files, MD5, fname] = aas_getfiles_bystream_multilevel(obj.IDs{idsrc}.aap,...
                aas_getsesstype(obj.IDs{idsrc}.aap),...
                [obj.indices(1),sess],stream,'output'); % TODO: associate files
            if ~exist('files','var') || isempty(files)
                prid = ''; id = 0;
                return
            end            
            [junk, MD5] = strtok(MD5); MD5 = MD5(2:end);
            
            % Add stream
            idname = ['id' stream];
            idattr = {...
                'streamname',stream,...
                'filename',fname,...
                'hash',MD5,...
                };
            [prid, id] = obj.Stream(idname,idattr,files);
        end
        
        function [prid id] = Module(obj,idname,attr) % 'Location', 'Stagename','Index'
            [prid, num, id]= obj.idExist(idname,attr);
            if isempty(prid)
                obj.IDs{end+1} = struct('id', [idname num2str(num+1)]);
                for f = 1:numel(attr)/2
                    obj.IDs{end}.(attr{f*2-1}) = attr{f*2};
                end
                id = numel(obj.IDs);
                
                obj.p.activity(obj.IDs{id}.id,{...
                    'prov:type','aa:module',...
                    'prov:label',obj.IDs{id}.Stagename,...
                    'nfo:belongsToContainer',{obj.IDs{id}.Location, 'nfo:Folder'},...
                    });
                prid = obj.IDs{id}.id;
            end
        end
        
        function [prid id] = Stream(obj,idname,attr,files) % 'streamname','filename(full)','hash';
            [prid, num, id]= obj.idExist(idname,attr);
            if isempty(prid)
                obj.IDs{end+1} = struct('id', [idname num2str(num+1)]);
                for f = 1:numel(attr)/2
                    obj.IDs{end}.(attr{f*2-1}) = attr{f*2};
                end
                id = numel(obj.IDs);
                prid = obj.IDs{id}.id;
                
                % add hash
                [junk, hnum]= obj.idExist('idHash');
                obj.IDs{end+1} = struct(...
                    'id',['idHash' num2str(hnum+1)],...
                    'hash',obj.IDs{id}.hash ...
                    );
                obj.p.entity(obj.IDs{end}.id,{...
                    'prov:type','nfo:FileHash',...
                    'nfo:hashValue',obj.IDs{end}.hash,...
                    });
                
                obj.p.entity(obj.IDs{id}.id,{...
                    'prov:type','aa:stream',...
                    'prov:label',obj.IDs{id}.streamname,...
                    'nfo:fileUrl',url(obj.IDs{id}.filename),...
                    'nfo:fileName',{spm_file(obj.IDs{id}.filename,'filename'),'xsd:string'},...
                    'nfo:hasHash',obj.IDs{end}.id,...
                    });
                
                % add file(s)
                for f = 1:size(files,1)
                    obj.IDs{end+1} = struct(...
                        'id',sprintf('%s_file%d',prid,f),...
                        'filename',deblank(files(f,:)) ...
                        );
                    id_file = numel(obj.IDs);
                    obj.p.entity(obj.IDs{id_file}.id,{...
                        'prov:type','nfo:LocalFileDataObject',...
                        'prov:label',sprintf('%s file #%d',obj.IDs{id}.streamname,f),...
                        'nfo:fileUrl',url(obj.IDs{id_file}.filename),...
                        'nfo:fileName',{spm_file(obj.IDs{id_file}.filename,'filename'),'xsd:string'},...
                        });
                    obj.p.hadMember(obj.IDs{id}.id,obj.IDs{id_file}.id);
                end
            end
        end
        
        function [prid, num, id] = idExist(obj,varargin)
            prid = '';
            num = 0;
            id = 0;
            
            idname = '';
            idfields = [];
            switch nargin
                case 3
                    idname = varargin{1};
                    idfields = varargin{2};
                case 2
                    if ischar(varargin{1}), idname = varargin{1};
                    elseif iscell(varargin{1}), idfields = varargin{1};
                    end
            end
            
            ind = [];
            if ~isempty(idname)
                for i = 1:numel(obj.IDs)
                    if ~isempty(strfind(obj.IDs{i}.id,idname))
                        ind(end+1) = i;
                    end
                end
                num = numel(ind);
            else
                ind = 1:numel(obj.IDs);
            end
            
            for i = ind
                match = true;
                for f = 1:numel(idfields)/2
                    match = match && (isfield(obj.IDs{i},idfields{f*2-1}) && ...
                        (...
                        (strcmp(idfields{f*2-1},'aap')) ||... % skip aap
                        (ischar(idfields{f*2}) && strcmp(obj.IDs{i}.(idfields{f*2-1}),idfields{f*2})) ||...
                        (isnumeric(idfields{f*2}) && (obj.IDs{i}.(idfields{f*2-1}) == idfields{f*2})) ...                        
                        ));
                end
                if match
                    prid = obj.IDs{i}.id;
                    id = i;
                    break;
                end
            end
        end
    end
end

%% Utils

function u = url(fname)
%-File URL scheme
if ispc, s='/'; else s=''; end
u = ['file://' s strrep(fname,'\','/')];
e = ' ';
for i=1:length(e)
    u = strrep(u,e(i),['%' dec2hex(e(i))]);
end
% u = ['file://./' spm_file(u,'filename')];
end
