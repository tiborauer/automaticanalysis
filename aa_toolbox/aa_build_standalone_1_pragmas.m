function aa_build_standalone_1_pragmas
% engine
feval_pragma('aa_doprocessing.m','aaq_.*.m')
feval_pragma('aa_feval.m','aamod_.*.m')
feval_pragma('aas_convertseries_fromstream.m',{'nonaa:spm_dicom_convert'}) % if you sepcify aap.directory_conventions.dicom_converter, add it here
feval_pragma('aaworker_poll.m','aamod_.*.m')

% module
xml = xml_read('aamod_secondlevel_GIFT.xml'); 
feval_pragma('aamod_secondlevel_GIFT.m',spm_file(regexp(xml.tasklist.currenttask.numICs.ATTRIBUTE.options,'\|','split'),'prefix','nonaa:'));

% toolbox
feval_pragma('aa_provenance.m','nonaa:spm_provenance')

% external
colormaps = {'parula','jet', 'hsv', 'hot', 'cool', 'spring',...
    'summer', 'autumn', 'winter', 'gray', 'bone', 'copper', ...
    'pink', 'lines', 'colorcube','prism','flag','white'};
colormaps = colormaps(logical(cellfun(@exist,colormaps)));
feval_pragma('surfacerender.m',spm_file(colormaps,'prefix','nonaa:'))

feval_pragma('gen_object_display.m','nonaa:display')
feval_pragma('mw_mfp.m',{...
    'nonaa:spm_check_registration'...
    'nonaa:spm_surf'...
    'nonaa:spm_uw_estimate'...
    'nonaa:spm_reslice'...
    })
end

function feval_pragma(fname,pttrn)
note = '% This function is automagically generated by';

aaroot = fileparts(which('aa_ver5'));

% list of subfunctions
if ~iscell(pttrn), pttrn = cellstr(pttrn); end
modules = '';
for p = 1:numel(pttrn)
    [p1, p2] = strtok(pttrn{p},':');
    switch p1
        case 'nonaa'
            modules = [modules ' ' p2(2:end)];
        otherwise
            incl = spm_file(spm_file(cellstr(spm_select('FPListRec',aaroot,['^' p1 '$'])),'basename'),'prefix',' ');
            modules = [modules cat(2,incl{:})];
    end
end

% read original
lines = {};
fid=fopen(fname,'r');
while ~feof(fid)
    lines{end+1} = fgetl(fid);
end
fclose(fid);

% remove note
indNote = cell_index(lines,note);
if indNote, lines(indNote) = []; end

% replace pragma
indPragma = cell_index(lines,'%#function');
if indPragma, lines{indPragma} = ['%#function' modules]; 
else
    indFunc = regexp(lines,['^[\s]*function.*' spm_file(fname,'basename')]);
    for i = 1:numel(indFunc)
        if ~isempty(indFunc{i}), break; end
    end
    lines = [lines(1:i) cellstr(['%#function' modules]) lines(i+1:end)];
end

% write new
fpath = strrep(spm_file(which(fname),'path'),aaroot,'aa_standalone_patch');
aas_makedir([],fpath);
fid=fopen(fullfile(fpath,fname),'w');
fprintf(fid,'%s %s\n',note,mfilename);
for l = 1:numel(lines)
    fprintf(fid,'%s\n',lines{l});
end
fclose(fid);
end